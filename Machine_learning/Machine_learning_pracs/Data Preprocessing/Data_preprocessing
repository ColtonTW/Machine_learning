{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1KxolgacgCDufvTijlm0sNaMth5mTkxeY","authorship_tag":"ABX9TyNryJ71G621XwyGz1LU4o1N"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FoPe80saw6lN","executionInfo":{"status":"ok","timestamp":1743779718774,"user_tz":-60,"elapsed":2074,"user":{"displayName":"Colton Williams","userId":"11052788817568199304"}},"outputId":"0d748e0d-4cf5-488d-93cc-ca2d4075b1db"},"outputs":[{"output_type":"stream","name":"stdout","text":["[['France' 44 72000]\n"," ['Spain' 27 48000]\n"," ['Germany' 30 54000]\n"," ['Spain' 38 61000]\n"," ['Germany' 40 61000]\n"," ['France' 35 58000]\n"," ['Spain' 38 52000]\n"," ['France' 48 79000]\n"," ['Germany' 50 83000]\n"," ['France' 37 67000]]\n","['No' 'Yes' 'No' 'No' 'Yes' 'Yes' 'No' 'Yes' 'No' 'Yes']\n"]}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","# Importing the dataset\n","dataset = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Machine_learning/Machine_learning_pracs/Data Preprocessing/Python/Data.csv')\n","X = dataset.iloc[:, :-1].values\n","y = dataset.iloc[:, -1].values\n","print(X)\n","print(y)"]},{"cell_type":"code","source":["from sklearn.impute import SimpleImputer\n","imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\n","imputer.fit(X[:, 1:3])\n","X[:, 1:3] = imputer.transform(X[:, 1:3])\n","print(X) ## fills in blanks with means\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aZmY8ITkxE8h","executionInfo":{"status":"ok","timestamp":1743779749088,"user_tz":-60,"elapsed":2293,"user":{"displayName":"Colton Williams","userId":"11052788817568199304"}},"outputId":"c5d6d8c4-42a6-465f-b2d5-9d335dee480c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["[['France' 44.0 72000.0]\n"," ['Spain' 27.0 48000.0]\n"," ['Germany' 30.0 54000.0]\n"," ['Spain' 38.0 61000.0]\n"," ['Germany' 40.0 61000.0]\n"," ['France' 35.0 58000.0]\n"," ['Spain' 38.0 52000.0]\n"," ['France' 48.0 79000.0]\n"," ['Germany' 50.0 83000.0]\n"," ['France' 37.0 67000.0]]\n"]}]},{"cell_type":"code","source":["# Encoding categorical data\n","# Encoding the Independent Variable\n","from sklearn.compose import ColumnTransformer ## applies the transformers\n","from sklearn.preprocessing import OneHotEncoder ## for onehot encoding cate. features to numeric and them to a binary format\n","ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')\n","## ^ takes a list of tuples, 'encoder' can be named anything, OneHotEncoder() is the transformer\n","## [0] shows that the first value should start with binary 0.0 -- this then goes on to make a code showing that all instances of\n","## France are 0.0 1.0 0.0 0.0 -- as there are 3 different countries named, there are 3 unique codes\n","# remainder shows what to do with other columns not needed to change. Passthrough shows to leave these alone\n","X = np.array(ct.fit_transform(X))\n","## applies the ct to the columns and converts it back to the same data as the OG dataset\n","print(X)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kf3S4DrgxG3d","executionInfo":{"status":"ok","timestamp":1743779775288,"user_tz":-60,"elapsed":25,"user":{"displayName":"Colton Williams","userId":"11052788817568199304"}},"outputId":"243aaab7-cea0-42be-c212-3cbfff24ff3b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0.0 1.0 0.0 0.0 44.0 72000.0]\n"," [1.0 0.0 0.0 1.0 27.0 48000.0]\n"," [1.0 0.0 1.0 0.0 30.0 54000.0]\n"," [1.0 0.0 0.0 1.0 38.0 61000.0]\n"," [1.0 0.0 1.0 0.0 40.0 61000.0]\n"," [0.0 1.0 0.0 0.0 35.0 58000.0]\n"," [1.0 0.0 0.0 1.0 38.0 52000.0]\n"," [0.0 1.0 0.0 0.0 48.0 79000.0]\n"," [1.0 0.0 1.0 0.0 50.0 83000.0]\n"," [0.0 1.0 0.0 0.0 37.0 67000.0]]\n"]}]},{"cell_type":"code","source":["# Encoding the Dependent Variable\n","from sklearn.preprocessing import LabelEncoder ## used for label encoding\n","le = LabelEncoder() ## creates the label encoder and assigns it to variable le\n","y = le.fit_transform(y) ## fits and transforms the y values to become numeric\n","print(y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"apwVR0-Kxo-v","executionInfo":{"status":"ok","timestamp":1743779778474,"user_tz":-60,"elapsed":10,"user":{"displayName":"Colton Williams","userId":"11052788817568199304"}},"outputId":"9d3fe3a4-4c23-4fc9-d8f7-0bb9503c947c"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 1 0 0 1 1 0 1 0 1]\n"]}]},{"cell_type":"code","source":["# Splitting the dataset into the Training set and Test set\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n","print(f\"X_train = {X_train}\")\n","print(f\"X_test = {X_test}\")\n","print(y_train) ### splits the dataset into two random datasets for training vs testing\n","print(y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fW6VGD-qxMKB","executionInfo":{"status":"ok","timestamp":1743779780981,"user_tz":-60,"elapsed":6,"user":{"displayName":"Colton Williams","userId":"11052788817568199304"}},"outputId":"2ec8685c-d9ed-4e1c-81a2-a03cf9cf8153"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train = [[1.0 0.0 0.0 1.0 38.0 52000.0]\n"," [1.0 0.0 1.0 0.0 40.0 61000.0]\n"," [0.0 1.0 0.0 0.0 44.0 72000.0]\n"," [1.0 0.0 0.0 1.0 38.0 61000.0]\n"," [1.0 0.0 0.0 1.0 27.0 48000.0]\n"," [0.0 1.0 0.0 0.0 48.0 79000.0]\n"," [1.0 0.0 1.0 0.0 50.0 83000.0]\n"," [0.0 1.0 0.0 0.0 35.0 58000.0]]\n","X_test = [[1.0 0.0 1.0 0.0 30.0 54000.0]\n"," [0.0 1.0 0.0 0.0 37.0 67000.0]]\n","[0 1 0 0 1 1 0 1]\n","[0 1]\n"]}]},{"cell_type":"code","source":["# Feature Scaling\n","from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler() ## creates the variable for scaling\n","X_train[:, 3:] = sc.fit_transform(X_train[:, 3:]) # fit calcs mean and SD and transform standardises it\n","X_test[:, 3:] = sc.transform(X_test[:, 3:])\n","print(f\"X_train = {X_train}\")\n","print(f\"X_test = {X_test}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UhpXvDIFxNPM","executionInfo":{"status":"ok","timestamp":1743779786148,"user_tz":-60,"elapsed":23,"user":{"displayName":"Colton Williams","userId":"11052788817568199304"}},"outputId":"5de121d4-7411-42cd-cf9c-e02ec21844cb"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train = [[1.0 0.0 0.0 1.2909944487358056 -0.28942984211696865 -1.0430254692900243]\n"," [1.0 0.0 1.0 -0.7745966692414834 0.0 -0.2767210428728636]\n"," [0.0 1.0 0.0 -0.7745966692414834 0.5788596842339373 0.659873256081444]\n"," [1.0 0.0 0.0 1.2909944487358056 -0.28942984211696865 -0.2767210428728636]\n"," [1.0 0.0 0.0 1.2909944487358056 -1.8812939737602963 -1.383605214364318]\n"," [0.0 1.0 0.0 -0.7745966692414834 1.1577193684678746 1.2558878099614579]\n"," [1.0 0.0 1.0 -0.7745966692414834 1.4471492105848434 1.5964675550357514]\n"," [0.0 1.0 0.0 -0.7745966692414834 -0.7235746052924217 -0.5321558516785838]]\n","X_test = [[1.0 0.0 1.0 -0.7745966692414834 -1.4471492105848434 -0.8727355967528775]\n"," [0.0 1.0 0.0 -0.7745966692414834 -0.434144763175453 0.2341485747385769]]\n"]}]}]}